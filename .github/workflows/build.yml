name: '🔧 CI - Build & Test'

# 用于构建、测试和验证cl-nestjs-opentelemetry库的持续集成工作流
# 在针对main分支的拉取请求以及推送到所有分支（发布提交除外）时运行
# 在多个Node.js版本上进行测试以确保兼容性

on:
  pull_request:
    branches: [main]
  push:
    # 在所有分支（包括main分支）上运行，但跳过发布提交
    branches: ['**']

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Prevent indefinite hanging
    # Skip if it's a release commit to avoid conflicts with release workflow
    if: >-
      ${{ !startsWith(github.event.head_commit.message, 'chore: release v') }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm Package Manager
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 🟢 Setup Node.js 22 (Build)
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: 🧹 Clear pnpm cache if needed
        run: |
          echo "Checking pnpm cache status..."
          pnpm store status || pnpm store prune || true

      - name: 📚 Install Dependencies
        timeout-minutes: 5
        run: |
          echo "Installing root dependencies..."
          pnpm install --no-frozen-lockfile
          echo "Installing playground dependencies..."
          cd playground && pnpm install --no-frozen-lockfile

      - name: 🔍 Run Quality Checks (Lint & Test)
        timeout-minutes: 10
        run: |
          echo "Running linter..."
          pnpm lint
          echo "Running tests with coverage..."
          pnpm coverage
          echo "Building library..."
          pnpm build

      - name: ✅ Verify Build Outputs
        run: |
          # Check required files exist
          required_files=(
            "dist/index.mjs" "dist/index.cjs" "dist/index.d.ts"
            "dist/index.d.mts" "dist/index.d.cts"
          )

          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing: $file"
              exit 1
            fi
          done

          echo "✅ All build outputs verified"

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            pnpm-lock.yaml
          retention-days: 1

  # Compatibility test job - verify library works on Node.js 20
  compatibility:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [20]
      fail-fast: false

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm Package Manager
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 🟢 Setup Node.js ${{ matrix.node-version }} (Compatibility Test)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: 📚 Install Runtime Dependencies Only
        timeout-minutes: 3
        run: |
          echo "Installing production dependencies for Node.js ${{ matrix.node-version }} compatibility test..."
          # Skip scripts to avoid husky prepare script error in CI
          pnpm install --prod --no-frozen-lockfile --ignore-scripts

      - name: 🧪 Test Module Imports (ESM & CJS) on Node.js ${{ matrix.node-version }}
        timeout-minutes: 2
        run: |
          echo "Testing ESM imports on Node.js ${{ matrix.node-version }}..."
          node --input-type=module -e "
            import { KmsModule, KmsService } from './dist/index.mjs';
            console.log('✅ ESM import successful on Node.js ${{ matrix.node-version }}:', typeof KmsModule, typeof KmsService);
            if (typeof KmsModule !== 'function' || typeof KmsService !== 'function') {
              throw new Error('Invalid exports detected');
            }
          "

          echo "Testing CJS requires on Node.js ${{ matrix.node-version }}..."
          node -e "
            const { KmsModule, KmsService } = require('./dist/index.cjs');
            console.log('✅ CJS require successful on Node.js ${{ matrix.node-version }}:', typeof KmsModule, typeof KmsService);
            if (typeof KmsModule !== 'function' || typeof KmsService !== 'function') {
              throw new Error('Invalid exports detected');
            }
          "

          echo "✅ Node.js ${{ matrix.node-version }} compatibility verified"
